name: Database Changes Notification

on:
  push:
    branches:
      - 'release/**'
    paths:
      - '**/src/main/resources/db/**'
  workflow_dispatch: {}

# Add permissions for security best practices
permissions:
  contents: read
  pull-requests: read

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest release
        id: get_latest_release
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            const latestRelease = releases.data[0]?.tag_name || '';
            core.setOutput('latest_release', latestRelease);

      - name: Get changed files
        id: get_changes
        run: |
          if [ -n "${{ steps.get_latest_release.outputs.latest_release }}" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ steps.get_latest_release.outputs.latest_release }} HEAD -- "**/src/main/resources/db/**")
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD -- "**/src/main/resources/db/**")
          fi
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Add changes to workflow summary
        id: get_summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')
            const changedFiles = process.env.CHANGED_FILES || '';
            const latestRelease = process.env.LATEST_RELEASE || '';
            const serverUrl = process.env.GITHUB_SERVER_URL || '';
            const repository = process.env.GITHUB_REPOSITORY || '';
            const sha = process.env.GITHUB_SHA || '';
                                
            const summary = [
              `## Database Changes Detected from ${latestRelease} to ${latestRelease}`,
              '',
              `### Changed ${changedFiles.trim().split('\n').length} files:` ,
              '```',
              changedFiles,
              '```',
              '',
              '### Comparison Link:',
              `[View changes](${serverUrl}/${repository}/compare/${latestRelease}...${sha})`,
              '',
              '> Note: The comparison is made between the latest release tag and the current commit SHA.'
            ].join('\n');
            
            await fs.promises.appendFile(process.env.GITHUB_STEP_SUMMARY, summary);
                                    
        env:
          CHANGED_FILES: ${{ steps.get_changes.outputs.changed_files }}
          LATEST_RELEASE: ${{ steps.get_latest_release.outputs.latest_release }} 

      - name: Generate Slack payload
        id: generate_slack_payload
        uses: actions/github-script@v7
        with:
          script: |
            const changedFiles = process.env.CHANGED_FILES || '';
            const slackFormattedFiles = "• " + changedFiles
              .trim()
              .split('\n')
              .map(file => {
                const filePath = file.trim();
                const diffUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}`;
                return `<${diffUrl}|${filePath}>`;
              })
              .join('\n• ');

            throw new Error("fake news");

            const payload = {
              channel: process.env.SLACK_CHANNEL_ID,
              text: "Database changes detected",
              blocks: [
                {
                  type: "section",
                  text: {
                    type: "mrkdwn",
                    text: [
                      `*Database Changes Detected:* from ${process.env.LATEST_RELEASE} <- ${process.env.GITHUB_REF_NAME} (${process.env.GITHUB_SHA})`,
                      `*Comparison Link:* <${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/compare/${process.env.LATEST_RELEASE}...${process.env.GITHUB_SHA}|View changes>`,
                      "*Note:* The comparison is made between the latest release tag and the current commit SHA."
                    ].join("\n")
                  }
                },
                {
                  type: "section",
                  text: {
                    type: "mrkdwn",
                    text: ["*Changed Files:*", slackFormattedFiles].join("\n")
                  }
                }
              ]
            };
            core.setOutput('payload', JSON.stringify(payload));
        env:
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          LATEST_RELEASE: ${{ steps.get_latest_release.outputs.latest_release }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          CHANGED_FILES: ${{ steps.get_changes.outputs.changed_files }}

      - name: Post Changes to Slack
        if: success()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          payload: ${{ steps.generate_slack_payload.outputs.payload }}

      - name: Post Failures to Slack
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const payload = {
              channel: process.env.SLACK_CHANNEL_ID,
              text: "❌ Database Changes Workflow Failed",
              blocks: [
                {
                  type: "section",
                  text: {
                    type: "mrkdwn",
                    text: [
                      "*❌ Database Changes Workflow Failed*",
                      `*Branch:* ${process.env.GITHUB_REF_NAME}`,
                      `*Commit:* ${process.env.GITHUB_SHA}`,
                      `*Workflow:* ${process.env.GITHUB_WORKFLOW}`,
                      `*Run:* <${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}|View Run>`
                    ].join("\n")
                  }
                }
              ]
            };
            await fetch(`https://slack.com/api/chat.postMessage`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${process.env.SLACK_BOT_TOKEN}`
              },
              body: JSON.stringify(payload)
            });
        env:
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_WORKFLOW: ${{ github.workflow }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
                    