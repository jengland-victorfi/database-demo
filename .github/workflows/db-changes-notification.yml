name: Database Changes Notification

on:
  push:
    branches:
      - 'release/**'
    paths:
      - '**/src/main/resources/db/**'
  workflow_dispatch: {}

# Add permissions for security best practices
permissions:
  contents: read
  pull-requests: read

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest release
        id: get_latest_release
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            const latestRelease = releases.data[0]?.tag_name || '';
            core.setOutput('latest_release', latestRelease);

      - name: Get changed files
        id: get_changes
        run: |
          if [ -n "${{ steps.get_latest_release.outputs.latest_release }}" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ steps.get_latest_release.outputs.latest_release }} HEAD -- "**/src/main/resources/db/**")
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD -- "**/src/main/resources/db/**")
          fi
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Add changes to workflow summary
        id: get_summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')
            const changedFiles = process.env.CHANGED_FILES || '';
            const latestRelease = process.env.LATEST_RELEASE || '';
            const serverUrl = process.env.GITHUB_SERVER_URL || '';
            const repository = process.env.GITHUB_REPOSITORY || '';
            const sha = process.env.GITHUB_SHA || '';
            
            // Format changed files for display
            const formattedFiles = changedFiles
              .trim()
              .split('\n')
              // .map(file => `- ${file}`)
              .join('\n');
            
            const summary = [
              `## Database Changes Detected from ${latestRelease} to ${latestRelease}`,
              '',
              `### Changed ${changedFiles.trim().split('\n').length} files:` ,
              '```',
              formattedFiles,
              '```',
              '',
              '### Comparison Link:',
              `[View changes](${serverUrl}/${repository}/compare/${latestRelease}...${sha})`,
              '',
              '> Note: The comparison is made between the latest release tag and the current commit SHA.'
            ].join('\n');
            
            await fs.promises.appendFile(process.env.GITHUB_STEP_SUMMARY, summary);
            
            // Set output for Slack message
            core.setOutput('formatted_files', formattedFiles);
        env:
          CHANGED_FILES: ${{ steps.get_changes.outputs.changed_files }}
          LATEST_RELEASE: ${{ steps.get_latest_release.outputs.latest_release }} 

      - name: Echo formatted files
        run: echo "${{ steps.get_summary.outputs.formatted_files }}"

      - name: Post to a Slack channel
        if: always()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "Database changes detected: ${{ steps.get_changes.outputs.changed_files }}"
            blocks:
              - type: section
                text:
                  type: mrkdwn
                  text: |
                    *Database Changes Detected*
                    *Changed Files:*
                    *Comparison Link:* <${{ github.server_url }}/${{ github.repository }}/compare/${{ steps.get_latest_release.outputs.latest_release }}...${{ github.sha }}|View changes>
                    *Note:* The comparison is made between the latest release tag and the current commit SHA.
        