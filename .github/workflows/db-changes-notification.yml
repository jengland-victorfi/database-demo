name: Database Changes Notification

on:
  push:
    branches:
      - 'release/**'
    paths:
      - '**/src/main/resources/db/**'
  workflow_dispatch: {}

# Add permissions for security best practices
permissions:
  contents: read
  pull-requests: read

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest release
        id: get_latest_release
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            const latestRelease = releases.data[0]?.tag_name || '';
            core.setOutput('latest_release', latestRelease);

      - name: Get changed files
        id: get_changes
        run: |
          if [ -n "${{ steps.get_latest_release.outputs.latest_release }}" ]; then
            if git rev-parse "${{ steps.get_latest_release.outputs.latest_release }}" >/dev/null 2>&1; then
              CHANGED_FILES=$(git diff --name-only "${{ steps.get_latest_release.outputs.latest_release }}" HEAD -- "**/src/main/resources/db/**")
            else
              echo "Warning: Tag ${{ steps.get_latest_release.outputs.latest_release }} does not exist, comparing with previous commit"
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD -- "**/src/main/resources/db/**")
            fi
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD -- "**/src/main/resources/db/**")
          fi
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate summary data
        id: generate_summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')
            const changedFiles = process.env.CHANGED_FILES || '';
            const latestRelease = process.env.LATEST_RELEASE || '';
            const serverUrl = process.env.GITHUB_SERVER_URL || '';
            const repository = process.env.GITHUB_REPOSITORY || '';
            const sha = process.env.GITHUB_SHA || '';
            
            const changedFilesList = changedFiles.trim().split('\n');
            const changedFilesCount = changedFilesList.length;
            
            const summary = {
              title: `Database Changes Detected from ${latestRelease} to ${sha.slice(0, 7)}`,
              changedFilesCount,
              changedFiles: changedFilesList,
              comparisonLink: `${serverUrl}/${repository}/compare/${latestRelease}...${sha}`,
              note: 'Note: The comparison is made between the latest release tag and the current commit SHA.'
            };
            
            // Create markdown template
            const markdownTemplate = {
              slack: [
                '*Database Changes Detected*',
                '',
                '*Changed Files:*',
                `${summary.changedFilesCount} files modified`,
                '',
                '*Comparison:*',
                `<${summary.comparisonLink}|View changes>`,
                '',
                summary.note
              ].join('\n'),
              github: [
                `## ${summary.title}`,
                '',
                `### Changed ${summary.changedFilesCount} files:`,
                summary.changedFiles.join('\n'),
                '',
                '### Comparison Link:',
                `[View changes](${summary.comparisonLink})`,
                '',
                `> ${summary.note}`
              ].join('\n')
            };
            
            core.setOutput('summary', JSON.stringify(summary));
            core.setOutput('markdown', JSON.stringify(markdownTemplate));

            // Add changes to workflow summary
            await fs.promises.appendFile(process.env.GITHUB_STEP_SUMMARY, markdownTemplate.github);
        env:
          CHANGED_FILES: ${{ steps.get_changes.outputs.changed_files }}
          LATEST_RELEASE: ${{ steps.get_latest_release.outputs.latest_release }}

      - name: Post to a Slack channel
        if: always()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          error: true
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "Database changes detected: ${{ steps.generate_summary.outputs.summary.changedFilesCount }} files modified"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: |
                    # TEST
                    ## TESTING [link using markdown](https://github.com/)

                  
          